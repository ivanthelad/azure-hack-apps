@page "/repairtasks"
@using Contonance.Shared
@using Contonance.WebPortal.Shared
@inject HttpClient Http
@inject AppInsightsInterop AppInsightsInterop
@inject IApplicationInsights ApplicationInsights

<PageTitle>Repair Tasks</PageTitle>

<h1>Repair Tasks</h1>

@if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (reports == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Title</th>
            <th scope="col">Severity</th>
            <th scope="col">Due Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var report in reports)
            {
                <tr role="button" @onclick="@(() => ShowReport(report))"
                    class="@(report == reportToShow ? "table-active" : "")">
                    <td><a @onclick:preventDefault href="#">@report.Title</a></td>
                    <td
                        class="@(report.Severity == Severity.High ? "table-danger" : "") @(report.Severity == Severity.Medium ? "table-warning" : "")">
                        @report.Severity</td>
                    <td>@report.DueDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (reportToShow != null)
{
    <div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">@reportToShow.Title</h5>
            <h6
                class="card-subtitle mb-2 text-body-secondary @(reportToShow.Severity == Severity.High ? "text-danger" : "") @(reportToShow.Severity == Severity.Medium ? "text-warning" : "")">
                @reportToShow.Severity</h6>
            <h6 class="card-subtitle mb-2 text-body-secondary">Due: @reportToShow.DueDate</h6>
            <p class="card-text">@reportToShow.Details</p>
        </div>
    </div>
}

@code {
    private RepairReport[]? reports;

    private RepairReport? reportToShow;

    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await AppInsightsInterop.SetNewTraceIdAsync();
        await ApplicationInsights.TrackPageView();

        await LoadReportsAsync();
    }

    private async Task LoadReportsAsync()
    {
        ErrorMessage = null;
        reports = null;
        reportToShow = null;

        var traceId = await AppInsightsInterop.GetCurrentTraceIdAsync();
        var response = await Http.GetAsync("RepairReports");
        if (response.IsSuccessStatusCode)
        {
            reports = await response.Content.ReadFromJsonAsync<RepairReport[]>();
        }
        else
        {
            ErrorMessage = $"Sorry, something went wrong. Please contact support with: {traceId}";
        }
    }

    private void ShowReport(RepairReport report)
    {
        reportToShow = report;
    }
}
